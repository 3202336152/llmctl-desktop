<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.llmctl.mapper.ProviderMapper">

    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.llmctl.entity.Provider">
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="VARCHAR"/>
        <result column="base_url" property="baseUrl" jdbcType="VARCHAR"/>
        <result column="model_name" property="modelName" jdbcType="VARCHAR"/>
        <result column="max_tokens" property="maxTokens" jdbcType="INTEGER"/>
        <result column="max_output_tokens" property="maxOutputTokens" jdbcType="INTEGER"/>
        <result column="temperature" property="temperature" jdbcType="DECIMAL"/>
        <result column="extra_headers" property="extraHeaders" jdbcType="VARCHAR"/>
        <result column="token_strategy_type" property="tokenStrategyType"
                typeHandler="com.llmctl.config.TokenStrategyTypeHandler"/>
        <result column="token_fallback_on_error" property="tokenFallbackOnError" jdbcType="BOOLEAN"/>
        <result column="is_active" property="isActive" jdbcType="BOOLEAN"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 基础列 -->
    <sql id="Base_Column_List">
        id, user_id, name, description, type, base_url, model_name, max_tokens, max_output_tokens,
        temperature, extra_headers, token_strategy_type, token_fallback_on_error, is_active,
        created_at, updated_at
    </sql>

    <!-- 根据ID和用户ID查询Provider -->
    <select id="findById" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM providers
        WHERE id = #{id} AND user_id = #{userId}
    </select>

    <!-- 查询指定用户的所有Provider -->
    <select id="findAll" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM providers
        WHERE user_id = #{userId}
        ORDER BY created_at DESC
    </select>

    <!-- 根据类型和用户ID查询Provider列表 -->
    <select id="findByType" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM providers
        WHERE type = #{type} AND user_id = #{userId}
        ORDER BY created_at DESC
    </select>

    <!-- 根据名称和用户ID查询Provider -->
    <select id="findByName" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM providers
        WHERE name = #{name} AND user_id = #{userId}
    </select>

    <!-- 插入Provider -->
    <insert id="insert" parameterType="com.llmctl.entity.Provider">
        INSERT INTO providers (
            id, user_id, name, description, type, base_url, model_name,
            max_tokens, max_output_tokens, temperature, extra_headers,
            token_strategy_type, token_fallback_on_error, is_active, created_at, updated_at
        )
        VALUES (
            #{id}, #{userId}, #{name}, #{description}, #{type}, #{baseUrl}, #{modelName},
            #{maxTokens}, #{maxOutputTokens}, #{temperature}, #{extraHeaders},
            #{tokenStrategyType, typeHandler=com.llmctl.config.TokenStrategyTypeHandler},
            #{tokenFallbackOnError}, #{isActive}, #{createdAt}, #{updatedAt}
        )
    </insert>

    <!-- 更新Provider -->
    <update id="update" parameterType="com.llmctl.entity.Provider">
        UPDATE providers
        SET
            name = #{name},
            description = #{description},
            base_url = #{baseUrl},
            model_name = #{modelName},
            max_tokens = #{maxTokens},
            max_output_tokens = #{maxOutputTokens},
            temperature = #{temperature},
            extra_headers = #{extraHeaders},
            token_strategy_type = #{tokenStrategyType, typeHandler=com.llmctl.config.TokenStrategyTypeHandler},
            token_fallback_on_error = #{tokenFallbackOnError},
            is_active = #{isActive},
            updated_at = #{updatedAt}
        WHERE id = #{id} AND user_id = #{userId}
    </update>

    <!-- 根据ID和用户ID删除Provider -->
    <delete id="deleteById">
        DELETE FROM providers
        WHERE id = #{id} AND user_id = #{userId}
    </delete>

    <!-- 检查Provider名称是否已存在（排除指定ID，同一用户下） -->
    <select id="existsByNameAndIdNot" resultType="java.lang.Boolean">
        SELECT COUNT(*) > 0
        FROM providers
        WHERE name = #{name} AND id != #{excludeId} AND user_id = #{userId}
    </select>

    <!-- 检查Provider名称是否已存在（同一用户下） -->
    <select id="existsByName" resultType="java.lang.Boolean">
        SELECT COUNT(*) > 0
        FROM providers
        WHERE name = #{name} AND user_id = #{userId}
    </select>

    <!-- 统计指定用户的Provider总数 -->
    <select id="count" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM providers
        WHERE user_id = #{userId}
    </select>

    <!-- 根据类型统计指定用户的Provider数量 -->
    <select id="countByType" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM providers
        WHERE type = #{type} AND user_id = #{userId}
    </select>

</mapper>