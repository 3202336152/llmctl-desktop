name: Build Electron App

on:
  push:
    branches: [ main, master ]
    paths:
      - 'electron-app/**'
      - '.github/workflows/build-electron.yml'
    tags:
      - 'v*'  # 当推送版本标签时触发（如 v2.1.3）
  workflow_dispatch:  # 允许手动触发

jobs:
  build-windows:
    name: Build Windows App
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python build tools
        run: pip install setuptools

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: electron-app/package-lock.json

      - name: Install dependencies
        working-directory: electron-app
        run: npm install

      - name: Configure API URL
        working-directory: electron-app
        run: |
          echo "REACT_APP_API_BASE_URL=http://117.72.200.2:8080/llmctl" > .env
          echo "LLMCTL_API_BASE_URL=http://117.72.200.2:8080/llmctl" >> .env

      - name: Build and package Windows
        working-directory: electron-app
        run: |
          npm run build
          npm run dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: LLMctl-Windows-Installer
          path: electron-app/release/LLMctl Setup *.exe
          retention-days: 30
          if-no-files-found: error

      - name: Upload Windows Portable
        uses: actions/upload-artifact@v4
        with:
          name: LLMctl-Windows-Portable
          path: electron-app/release/win-unpacked/
          retention-days: 30
          if-no-files-found: warn

  build-macos:
    name: Build macOS App
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python build tools
        run: pip install setuptools

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: electron-app/package-lock.json

      - name: Install dependencies
        working-directory: electron-app
        run: npm install

      - name: Configure API URL
        working-directory: electron-app
        run: |
          echo "REACT_APP_API_BASE_URL=http://117.72.200.2:8080/llmctl" > .env
          echo "LLMCTL_API_BASE_URL=http://117.72.200.2:8080/llmctl" >> .env

      - name: Build and package macOS
        working-directory: electron-app
        run: |
          npm run build
          npm run dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS Installer
        uses: actions/upload-artifact@v4
        with:
          name: LLMctl-macOS-Installer
          path: electron-app/release/LLMctl-*.dmg
          retention-days: 30
          if-no-files-found: error

  build-linux:
    name: Build Linux App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python build tools
        run: pip install setuptools

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: electron-app/package-lock.json

      - name: Install dependencies
        working-directory: electron-app
        run: npm install

      - name: Configure API URL
        working-directory: electron-app
        run: |
          echo "REACT_APP_API_BASE_URL=http://117.72.200.2:8080/llmctl" > .env
          echo "LLMCTL_API_BASE_URL=http://117.72.200.2:8080/llmctl" >> .env

      - name: Build and package Linux
        working-directory: electron-app
        run: |
          npm run build
          npm run dist:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux Installer
        uses: actions/upload-artifact@v4
        with:
          name: LLMctl-Linux-Installer
          path: electron-app/release/LLMctl-*.AppImage
          retention-days: 30
          if-no-files-found: error

  # Release Job - 仅在推送版本标签时运行
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux]
    if: startsWith(github.ref, 'refs/tags/v')  # 仅在 v* 标签时运行

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows Installer
        uses: actions/download-artifact@v4
        with:
          name: LLMctl-Windows-Installer
          path: ./artifacts/windows/

      - name: Download macOS Installer
        uses: actions/download-artifact@v4
        with:
          name: LLMctl-macOS-Installer
          path: ./artifacts/macos/

      - name: Download Linux Installer
        uses: actions/download-artifact@v4
        with:
          name: LLMctl-Linux-Installer
          path: ./artifacts/linux/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          name: LLMctl ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: |
            ## 🎉 LLMctl ${{ github.ref_name }} 发布

            ### 📦 下载链接
            - **Windows**: LLMctl-Setup.exe
            - **macOS**: LLMctl.dmg
            - **Linux**: LLMctl.AppImage

            ### 🔧 构建信息
            - **触发方式**: ${{ github.event_name }}
            - **提交哈希**: ${{ github.sha }}
            - **分支**: ${{ github.ref_name }}

            ### 🔧 更新内容
            ${{ github.event.head_commit.message }}

            ### 📋 安装说明
            1. 下载对应平台的安装包
            2. Windows: 双击 .exe 文件安装
            3. macOS: 打开 .dmg 文件拖拽到 Applications
            4. Linux: 给 AppImage 添加执行权限后运行

            ### ⚠️ 注意事项
            - 首次安装可能需要允许应用运行
            - Windows 可能需要关闭安全软件警告

            ---

            🔗 [项目主页](https://github.com/3202336152/llmctl-desktop)
            📖 [使用文档](https://github.com/3202336152/llmctl-desktop/wiki)
          files: |
            ./artifacts/windows/LLMctl Setup *.exe
            ./artifacts/macos/LLMctl-*.dmg
            ./artifacts/linux/LLMctl-*.AppImage
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
